class Node:
    def __init__(self, name):
        self.name = name
        self.connected_nodes = []

    def connect_to(self, other_node):
        self.connected_nodes.append(other_node)

# create two nodes
node1 = Node("node1")
node2 = Node("node2")

# connect node1 to node2
node1.connect_to(node2)

# check if node1 is connected to node2
print(node2 in node1.connected_nodes)  # True



In this example, the Node class has an attribute connected_nodes, which is a list that stores the nodes to which the current node is connected. The class also has a connect_to() method, which is used to connect the current node to another node. The method takes one parameter, which is the other node, and appends it to the connected_nodes list.

In the example, we created two nodes, node1 and node2, and connected node1 to node2. We then checked if node1 is connected to node2 and it returns true.

This is a simple example of how you can use an attribute and a method to model the relationship between two objects. You can also add more functionality to the class, such as a method to disconnect nodes, or to check if two nodes are connected to each other.

Another approach to model this relationship would be to use Graph data structure where edges between nodes represents the relationship.

You can also use a library such as networkx which provides a lot of functionalities related to graph data structure.